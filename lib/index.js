const effectStack=[];let activeEffect;const bucket=new WeakMap;function track(target,key){if(!activeEffect)return;let propStore=bucket.get(target);if(!propStore)bucket.set(target,propStore=new Map);let effectStore=propStore.get(key);if(!effectStore)propStore.set(key,effectStore=new Set);effectStore.add(activeEffect);propStore.set(key,effectStore);activeEffect.deps.push(effectStore)}function trigger(target,key){const propStore=bucket.get(target);if(!propStore)return;const effectStore=propStore.get(key);if(!effectStore)return;const runStore=new Set;effectStore.forEach(effectFn=>{if(effectFn===activeEffect)return;runStore.add(effectFn)});runStore.forEach(effectFn=>effectFn())}export function observe(data){return new Proxy(data,{get(target,key){track(target,key);return target[key]},set(target,key,newValue){target[key]=newValue;trigger(target,key);return true}})}function cleanup(effectFn){effectFn.deps.forEach(effectStore=>effectStore.delete(effectFn));effectFn.deps=[]}export function effect(fn){const effectFn=()=>{cleanup(effectFn);effectStack.push(effectFn);activeEffect=effectStack[effectStack.length-1];fn();effectStack.pop();activeEffect=effectStack[effectStack.length-1]};effectFn.deps=[];effectFn()}